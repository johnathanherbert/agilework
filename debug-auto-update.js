// Script para testar o comportamento do auto-update
// Para ser executado no console do navegador

console.log('üß™ Testando sistema de auto-update...');

// Fun√ß√£o para simular mudan√ßa de vers√£o
function simulateVersionChange() {
  const newVersion = 'test-version-' + Date.now();
  localStorage.setItem('app_last_known_version', newVersion);
  console.log('‚úÖ Vers√£o simulada definida:', newVersion);
  
  // Recarregar para testar a detec√ß√£o
  setTimeout(() => {
    console.log('üîÑ Recarregando para testar detec√ß√£o...');
    window.location.reload();
  }, 1000);
}

// Fun√ß√£o para verificar estado atual
function checkCurrentState() {
  const lastKnown = localStorage.getItem('app_last_known_version');
  console.log('üìä Estado atual do auto-update:');
  console.log('- √öltima vers√£o conhecida:', lastKnown);
  console.log('- NODE_ENV:', process.env.NODE_ENV);
  console.log('- NEXT_PUBLIC_APP_VERSION:', process.env.NEXT_PUBLIC_APP_VERSION);
}

// Fun√ß√£o para limpar estado
function clearState() {
  localStorage.removeItem('app_last_known_version');
  console.log('üßπ Estado limpo');
  if (window.resetAppUpdateState) {
    window.resetAppUpdateState();
  }
}

// Disponibilizar fun√ß√µes globalmente
window.testAutoUpdate = {
  simulateVersionChange,
  checkCurrentState,
  clearState
};

console.log('üõ†Ô∏è  Fun√ß√µes dispon√≠veis:');
console.log('- window.testAutoUpdate.simulateVersionChange() - Simula nova vers√£o');
console.log('- window.testAutoUpdate.checkCurrentState() - Mostra estado atual');  
console.log('- window.testAutoUpdate.clearState() - Limpa estado');

// Mostrar estado inicial
checkCurrentState();
